#ifndef LA_H


#include<stdlib.h>
#include<ctype.h>
#include<stdio.h>
#include<string.h>

#define nil NULL

#define LengthOfBuf 5000
#define Lexemelength 200


char lexeme[Lexemelength];

char buf[LengthOfBuf];

int  forward;


bool valid( char *lexeme, FILE **tokenFile, int countLexeme )
{
	int lengthOfLexeme;
	int state, i;

	lengthOfLexeme = strlen(lexeme);
	
	state = 0;
	for(i = 0; i <= lengthOfLexeme; i++)
	{
		switch( state )
		{
			case 0:
				if(lexeme[i] == '\t' || lexeme[i] == '\n' || lexeme[i] == ' ') 
				{ 
					state = 1; 
				}
				else if(lexeme[i] == ';' || lexeme[i] == ',' || lexeme[i] == '(' || lexeme[i] == ')' || lexeme[i] == '{' || lexeme[i] == '}')
				{ 
					state = 2; 
				}
				else if(lexeme[i] == '<') 
				{ 
					state = 3; 
				}
				else if(lexeme[i] == '>') 
				{ 
					state = 5; 
				}
				else if(lexeme[i] == '!') 
				{ 
					state = 8; 
				}
				else if(lexeme[i] == '=') 
				{ 
					state = 9; 
				}
				else if(lexeme[i] == '+') 
				{ 
					state = 10; 
				}			
				else if(lexeme[i] == '-') 
				{ 
					state = 12; 
				}
				else if(lexeme[i] == '*' || lexeme[i] == '/') 
				{ 
					state = 13; 
				}
				else if(isalpha( lexeme[i] )) 
				{ 
					state = 15; 
				}
				else if(isdigit(lexeme[i])) 
				{ 
					state = 18; 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 1:
				if(lexeme[i] == '\0')
				{
					fprintf(*tokenFile, "\n%d: <delim, ASCII Value=%d>", countLexeme, lexeme[i-1]); 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 2:
				if(lexeme[i] == '\0')
				{ 
					fprintf(*tokenFile, "\n%d: <special, %s>", countLexeme, lexeme); 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 3:
				if( lexeme[i] == '\0' ) 
				{ 
					fprintf(*tokenFile, "\n%d: <rel_op, %s>", countLexeme, lexeme); 
				}
				else if( lexeme[i] == '=' ) 
				{ 
					state = 4; 
				}
				else if(lexeme[i] == '<') 
				{ 
					state = 6; 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 4:
				if(lexeme[i] == '\0') 
				{ 
					fprintf(*tokenFile, "\n%d: <rel_op, %s>", countLexeme, lexeme); 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 5:
				if( lexeme[i] == '\0' ) 
				{ 
					fprintf(*tokenFile, "\n%d: <rel_op, %s>", countLexeme, lexeme); 
				}
				else if( lexeme[i] == '=' ) 
				{ 
					state = 4; 
				}
				else if(lexeme[i] == '>') 
				{ 
					state = 7; 
				}
				else 
				{ 
					state = 21; 
				} 
				break;
			case 6:
				if(lexeme[i] == '\0') 
				{ 
					fprintf(*tokenFile, "\n%d: <io_op, %s>", countLexeme, lexeme); 
				}
				else 
				{ 
					state = 21; 
				} 
				break;
			case 7:
				if(lexeme[i] == '\0') 
				{ 
					fprintf(*tokenFile, "\n%d: <io_op, %s>", countLexeme, lexeme); 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 8:
				if(lexeme[i] == '=') 
				{ 
					state = 4; 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 9:
				if(lexeme[i] == '\0') 
				{ 
					fprintf( *tokenFile, "\n%d: <assign_op, %s>", countLexeme, lexeme); 
				}
				else if(lexeme[i] == '=') 
				{ 
					state = 4; 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 10:
				if(lexeme[i] == '\0') 
				{ 
					fprintf(*tokenFile, "\n%d: <arith_op, %s>", countLexeme, lexeme); 
				}
				else if(lexeme[i] == '+') 
				{ 
					state = 11; 
				}
				else if(lexeme[i] == '=') 
				{ 
					state = 14; 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 11:
				if(lexeme[i] == '\0') 
				{ 
					fprintf(*tokenFile, "\n%d: <i_d_op, %s>", countLexeme, lexeme); 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 12:
				if(lexeme[i] == '\0') 
				{ 
					fprintf(*tokenFile, "\n%d: <arith_op, %s>", countLexeme, lexeme); 
				}
				else if(lexeme[i] == '-') 
				{ 
					state = 11; 
				}
				else if(lexeme[i] == '=') 
				{ 
					state = 14; 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 13:
				if(lexeme[i] == '\0') 
				{ 
					fprintf(*tokenFile, "\n%d: <arith_op, %s>", countLexeme, lexeme); 
				}
				else if(lexeme[i] == '=')
				{ 
					state = 14;
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 14:
				if(lexeme[i] == '\0') 
				{ 
					fprintf(*tokenFile, "\n%d: <assign_op, %s>", countLexeme, lexeme); 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 15:
				if(lexeme[i] == '\0')
				{
					fprintf( *tokenFile, "\n%d: <type, %s>", countLexeme, lexeme);
				}
				else if(isdigit( lexeme[i] ) || isalpha( lexeme[i] )  ) 
				{ 
					state = 15; 
				}
				else if(lexeme[i] == '_') 
				{ 
					state = 16;
				}
				else 
				{
					state = 21; 
				}
				break;
			case 16:
				if(isdigit( lexeme[i]) || isalpha( lexeme[i]))
				{ 
					state = 17; 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 17:
				if(lexeme[i] == '\0')
				{
					fprintf(*tokenFile, "\n%d: <id, %s>", countLexeme, lexeme);
				}
				else if(isdigit( lexeme[i]) || isalpha(lexeme[i])) 
				{ 
					state = 17; 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 18:
				if(lexeme[i] == '\0') 
				{ 
					fprintf(*tokenFile, "\n%d: <num, %s>", countLexeme, lexeme); 
				}
				else if(isdigit( lexeme[i])) 
				{ 
					state = 18;
				}
				else if(lexeme[i] == '.') 
				{ 
					state = 19; 
				}
				else 
				{ 
					state = 21; 
				}
				break;
			case 19:
				if(isdigit( lexeme[i])) 
				{ 
					state = 20;
				}
				else 
				{ 
					state = 21;
				}
				break;
			case 20:
				if(lexeme[i] == '\0') 
				{ 
					fprintf( *tokenFile, "\n%d: <num, %s>", countLexeme, lexeme); 
				}
				else if(isdigit( lexeme[i])) 
				{ 
					state = 20; 
				}
				else 
				{
					state = 21;
				}
				break;
			case 21:
				break;
		}
	}

	if( state == 21 || state == 16 || state == 8)
		return false;
	return true;
}


#endif
