#ifndef FDEF_H

#include "Init.h"


void drawSlab
(
	float	heightOfSlab,
	float	widthOfSlab,
	float	lengthOfSlab	
)
{	
	float	vertex[9][3],
			X[3], Y[3], Z[3],
			XY[3], YZ[3], 
			XYCrossYZ[3],
			length, l, h, w;
	int		i;

	h = heightOfSlab/2.0f;
	w = widthOfSlab/2.0f;
	l = lengthOfSlab/2.0f;	

	vertex[1][0] =  w; vertex[1][1] = -h; vertex[1][2] =  l;
	vertex[2][0] =  w; vertex[2][1] =  h; vertex[2][2] =  l;
	vertex[3][0] = -w; vertex[3][1] =  h; vertex[3][2] =  l;
	vertex[4][0] = -w; vertex[4][1] = -h; vertex[4][2] =  l;
	vertex[5][0] =  w; vertex[5][1] = -h; vertex[5][2] = -l;
	vertex[6][0] =  w; vertex[6][1] =  h; vertex[6][2] = -l;
	vertex[7][0] = -w; vertex[7][1] =  h; vertex[7][2] = -l;
	vertex[8][0] = -w; vertex[8][1] = -h; vertex[8][2] = -l;

	for( i=0; i<6; i++ ) 
	{
		X[0] = vertex[ slabFace[i][0] ][0];
		X[1] = vertex[ slabFace[i][0] ][1];
		X[2] = vertex[ slabFace[i][0] ][2];
	 
		Y[0] = vertex[ slabFace[i][1] ][0];
		Y[1] = vertex[ slabFace[i][1] ][1];
		Y[2] = vertex[ slabFace[i][1] ][2];
	
		Z[0] = vertex[ slabFace[i][2] ][0];
		Z[1] = vertex[ slabFace[i][2] ][1];
		Z[2] = vertex[ slabFace[i][2] ][2];
	
		XY[0] = Y[0]-X[0]; XY[1] = Y[1]-X[1]; XY[2] = Y[2]-X[2];
		YZ[0] = Z[0]-Y[0]; YZ[1] = Z[1]-Y[1]; YZ[2] = Z[2]-Y[2];
	
		XYCrossYZ[0] = YZ[2]*XY[1] - XY[2]*YZ[1];
		XYCrossYZ[1] = XY[0]*YZ[2] - XY[2]*YZ[0];
		XYCrossYZ[2] = XY[0]*YZ[1] - XY[1]*YZ[0];
	
		length = sqrt( XYCrossYZ[0]*XYCrossYZ[0] 
					   + XYCrossYZ[1]*XYCrossYZ[1]
					   + XYCrossYZ[2]*XYCrossYZ[2] );
		
		glBegin( GL_POLYGON );
	  	    glNormal3f( XYCrossYZ[0]/length, 
						-XYCrossYZ[1]/length,
						XYCrossYZ[2]/length );
			glVertex3f( X[0], X[1], X[2] );
	        glVertex3f( Y[0], Y[1], Y[2] );
		    glVertex3f( Z[0], Z[1], Z[2] );
		    glVertex3f( vertex[ slabFace[i][3] ][0],
						vertex[ slabFace[i][3] ][1],
						vertex[ slabFace[i][3] ][2] );
	    glEnd();
	}
}


void drawCircularSlab
(
	float	radius,
	float	heightOfSlab,
	float	widthOfSlab,
	int		lengthOfSlab
)
{	
	float	vertex[9][3],
			X[3], Y[3], Z[3],
			XY[3], YZ[3], 
			XYCrossYZ[3],
			length, h;
	int		angle, i, j;

	h = heightOfSlab/2.0f;
	for( i=2, angle=0; angle<=lengthOfSlab; angle+=i )
	{
		vertex[1][0] = radius * cos( angle * oneRadian );
		vertex[1][2] = radius * sin( angle * oneRadian );
		vertex[1][1] = h;
		
		vertex[2][0] = radius * cos( (angle + i) * oneRadian );
		vertex[2][2] = radius * sin( (angle + i) * oneRadian );
		vertex[2][1] = h;
		
		vertex[3][0] = (widthOfSlab + radius) * cos( (angle + i) * oneRadian );
		vertex[3][2] = (widthOfSlab + radius) * sin( (angle + i) * oneRadian );
		vertex[3][1] = h;

		vertex[4][0] = (widthOfSlab + radius) * cos( angle * oneRadian );
		vertex[4][2] = (widthOfSlab + radius) * sin( angle * oneRadian );
		vertex[4][1] = h;

		vertex[5][0] = radius * cos( angle * oneRadian );
		vertex[5][2] = radius * sin( angle * oneRadian );
		vertex[5][1] = -h;
		
		vertex[6][0] = radius * cos( (angle + i) * oneRadian );
		vertex[6][2] = radius * sin( (angle + i) * oneRadian );
		vertex[6][1] = -h;

		vertex[7][0] = (widthOfSlab + radius) * cos( (angle + i) * oneRadian );
		vertex[7][2] = (widthOfSlab + radius) * sin( (angle + i) * oneRadian );
		vertex[7][1] = -h;

		vertex[8][0] = (widthOfSlab + radius) * cos( angle * oneRadian );
		vertex[8][2] = (widthOfSlab + radius) * sin( angle * oneRadian );
		vertex[8][1] = -h;

		for( j=0; j<6; j++ ) 
		{
			X[0] = vertex[ slabFace[j][0] ][0];
			X[1] = vertex[ slabFace[j][0] ][1];
			X[2] = vertex[ slabFace[j][0] ][2];
		 
			Y[0] = vertex[ slabFace[j][1] ][0];
			Y[1] = vertex[ slabFace[j][1] ][1];
			Y[2] = vertex[ slabFace[j][1] ][2];
		
			Z[0] = vertex[ slabFace[j][2] ][0];
			Z[1] = vertex[ slabFace[j][2] ][1];
			Z[2] = vertex[ slabFace[j][2] ][2];
		
			XY[0] = Y[0]-X[0]; XY[1] = Y[1]-X[1]; XY[2] = Y[2]-X[2];
			YZ[0] = Z[0]-Y[0]; YZ[1] = Z[1]-Y[1]; YZ[2] = Z[2]-Y[2];
		
			XYCrossYZ[0] = YZ[2]*XY[1] - XY[2]*YZ[1];
			XYCrossYZ[1] = XY[0]*YZ[2] - XY[2]*YZ[0];
			XYCrossYZ[2] = XY[0]*YZ[1] - XY[1]*YZ[0];
		
			length = sqrt( XYCrossYZ[0]*XYCrossYZ[0] 
						   + XYCrossYZ[1]*XYCrossYZ[1]
						   + XYCrossYZ[2]*XYCrossYZ[2] );
			
			glBegin( GL_POLYGON );
	  			glNormal3f( XYCrossYZ[0]/length, 
							-XYCrossYZ[1]/length,
							XYCrossYZ[2]/length );
				glVertex3f( X[0], X[1], X[2] );
				glVertex3f( Y[0], Y[1], Y[2] );
				glVertex3f( Z[0], Z[1], Z[2] );
				glVertex3f( vertex[ slabFace[j][3] ][0],
							vertex[ slabFace[j][3] ][1],
							vertex[ slabFace[j][3] ][2] );
			glEnd();
		}
	}
}


void drawCylinder
(
	float	height,
	float	radius
)
{
	float	vertex[74][3], normal[74][3], 
			theta, h;
	int		i;

	h = height/2.0f;
	for( i=0; i<=36; i++ )
	{
		theta = 10 * i * oneRadian;

		vertex[i][0] = vertex[i+37][0] = radius * cos( theta );
		normal[i][0] = normal[i+37][0] = cos( theta );
		
		vertex[i][1] = h; vertex[i+37][1] = -h;	
		normal[i][1] = normal[i+37][1] = 0.0;
		
		vertex[i][2] = vertex[i+37][2] = radius * sin( theta );
		normal[i][2] = normal[i+37][2] = sin( theta );
	}
	
	for( i=0; i<36; i++ )
	{
		glBegin( GL_POLYGON );
			glNormal3f( normal[ cylinderFace[i][0] ][0], 
						normal[ cylinderFace[i][0] ][1], 
						normal[ cylinderFace[i][0] ][2] );
			glVertex3f( vertex[ cylinderFace[i][0] ][0], 
						vertex[ cylinderFace[i][0] ][1], 
						vertex[ cylinderFace[i][0] ][2] );
			glNormal3f( normal[ cylinderFace[i][1] ][0], 
						normal[ cylinderFace[i][1] ][1], 
						normal[ cylinderFace[i][1] ][2] );
			glVertex3f( vertex[ cylinderFace[i][1] ][0], 
						vertex[ cylinderFace[i][1] ][1], 
						vertex[ cylinderFace[i][1] ][2] );
			glNormal3f( normal[ cylinderFace[i][2] ][0], 
						normal[ cylinderFace[i][2] ][1], 
						normal[ cylinderFace[i][2] ][2] );
			glVertex3f( vertex[ cylinderFace[i][2] ][0], 
						vertex[ cylinderFace[i][2] ][1], 
						vertex[ cylinderFace[i][2] ][2] );
			glNormal3f( normal[ cylinderFace[i][3] ][0], 
						normal[ cylinderFace[i][3] ][1], 
						normal[ cylinderFace[i][3] ][2] );
			glVertex3f( vertex[ cylinderFace[i][3] ][0], 
						vertex[ cylinderFace[i][3] ][1], 
						vertex[ cylinderFace[i][3] ][2] );
		glEnd();
	}
}

#endif